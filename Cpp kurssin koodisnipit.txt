Viope takaraja: 13.12.
----------------------

Uudempi ja vanhempi taulukkotyyli?
primitiivityyppi:	char input[8]	-> 
Standardityyppi:	std::array 	standard array type
					tai std::vector (joustavampi, parempi, suositeltu)
					string [8]

VECTOR
==============
Taulukon sijaan hyvä olisi tätä alkaa käyttämään. koko muuttuu dynaamisesti ilman mitään sähellystä.

#include <vector>
    std::vector<int> tulokset;
        std::cin >> tulos;
        if (tulos > 0) {
            tulokset.push_back(tulos);  // pusketaan vektorin jonoon luvun
    std::cout << "Vektorissa on " << tulokset.size() << " alkiota \n";
    // size() palauttaa vektoriin pituuden


Buffer overflow
===============


size_t
==========
size_t	-> tietotyyppi. kertoo minkä kokoinen jokin on.
		vektoreissa hyvin hyödyllinen, vektorin koko voi muuttua ohjelman ajon aikana ja size_t pysyy siinä mukana
for (size_t i{0]; i<paivat.size(); i++;{
	std::cout << paivat.at(i) << " ";
}
std::cout << "\n";

-> C++11 "Range-based for loop"
	for (int& luku: paivat){
	//	joka rundilla paivat -> menee luku-muuttujaan
		std::cout << luku << " ";}
	// Alkioiden läpikäyminen yksinkertaistettu koska se on niin yleistä puuhaa
	

STATIC
---------
static int lampunhengenkutsukertoja=0;

aliohjelmassa säilyttää muistissa muuttujan tiedon.


Viiteparametri
REFERENCE
	&
---------
int& minutes
	"Välittäjäkerros", tiedot voi kulkea edestakaisin
	Parametri/muuttuja voi pääohjelmasta kulkea funktioon ja kun se funktiossa muutetaan niin se on pääohjelmassakin muuttunut
	Eri asia kuin returnilla tuloksen palauttaminen.
	Käytännössä vastaaville paikoille aliohjelmaa aseta parametrit niin kääntäjä tekee niistä viiteparametreja
Moodlesta hyvä katsoa miten menee.

	void from_seconds(int duration, int& hours, int& minutes, int& seconds){	// Pääohjelmassa on samoilla paikoilla jotkin muuttujat mitkä sylkästään tänne ja sattuu vain olemaan sama nimi
	minutes = duration / SECONDS_PER_MINUTE; // capseilla on muuttuja, 60
	seconds = duration % SECONDS_PER_MINUTE;
	}
		Näille pitää löytää jokin varastopaikka.
		
	int main(){
		int hours;
		int minutes;
		int seconds;
		
	from seconds(1132, hours, minutes, seconds) // <- näillä syntyy paikkavastaavuus
		...
		cout << total;
		
		int hours=0;
		int minutes=0;
		int seconds=0;
		
		from_seconds(total, hours, minutes, seconds);
		cout << hours << "h "
		<< minutes << "m "
		<< seconds << "s "
		<< endl;


STRUCT
---------
Valmiiksi pitää olla valtiot1, valtio2.. valtio+n
ainakin vielä nyt.
	Niille sitten voidaan kysellä nimiä.
	Vois kokeilla tietenki toimisko for... valtio[i]


	// Kysy käyttäjältä valtion numero ja tulosta tiedot
	  int haettu_valtion_numero;
	  cout << "\nSyötä haettavan valtion numero: ";
	  cin >> haettu_valtion_numero;
		  if (haettu_valtion_numero == valtio1.valtion_numero) {
			cout << "\nValtion numero " << haettu_valtion_numero << " tiedot:\n";
		...
		  } else if (haettu_valtion_numero == valtio2.valtion_numero) {
			cout << "\nValtion numero " << haettu_valtion_numero << " tiedot:\n";

FOR JA WHILE
---------
// for-lause perusrakenne
for (alku; ehto; muutos) {
  // toistolohko
}

// Tulostaa luvut 1-10
for (int i = 1; i <= 10; i++) {
  std::cout << i << std::endl;}

int i = 1;
while (i <= 10) {
  std::cout << i << std::endl;
  i++;
}


========
ALIOHJELMA

//Aliohjelma. luku1 ja luku2 valmiina vastaanotettavaksi
	int laskesumma(int luku1, int luku2) {
	  return luku1 + luku2;
	}

// Pääohjelma jossa voitaisiin pyytää luvut, heitetään ne aliohjelmalle ja vastaanotetaan summa
	int main() {
	  int syota_luku1 = 10;
	  int syota_luku2 = 20;

	  // Kutsutaan aliohjelmaa. syota_luku1 ja 2 voisi olla yhtä hyvin (55, 30)
	  int summa = laskesumma(syota_luku1, syota_luku2);

	  // Tulostetaan lopputulos
	  cout << "Summa on: " << summa << endl;	}
---------------
	ERI TIEDOSTOSSA
	
	C++:ssa aliohjelman luomiseksi eri tiedostossa, sinun on ensin luotava aliohjelman määritelmä tiedostoon, joka sisältää aliohjelman koodin. Tämä tehdään seuraavasti:

	C++
	// tiedosto: aliohjelma.cpp

	#include <iostream>

	void foo(int x, double y) {
	  // Aliohjelman koodi
	}
	Use code with caution. Learn more
	Seuraavaksi sinun on liitettävä tämä tiedosto tiedostoon, jossa aliohjelmaa kutsutaan. Tämä tehdään seuraavasti:

	C++
	// tiedosto: main.cpp

	#include <iostream>
	#include "aliohjelma.cpp"

	int main() {
	  // Aliohjelman kutsu
	  foo(1, 3.14);

	  return 0;
	}

========

continue:
	continue-lauseen käyttö ohjelman suorituksen aikana siirtyy välittömästi seuraavan iteraation alkuun silmukassa, kuten for, while tai do-while.
	continue-lauseen käyttö ohittaa kaikki muut komennot kyseisen iteraation kohdalla ja jatkaa seuraavaan iteraatioon.
break:
	break-lauseen käyttö keskeyttää lähimmän silmukan suorituksen kokonaan.
	Se siirtyy pois silmukan sisäisestä suorituksesta ja jatkaa ohjelman suoritusta seuraavasta käskyjen kohdasta sen ulkopuolella.

========
Modulo - jakojäännös

luku %2 = 0
0 = parillinen
1 = pariton

rand()
0..32767
	rand() %100
	-> 0..99 +1
	lukuja väliltä 1..100

Modulo ei ikinä voi olla yhtä suuri tai suurempi kuin sen luku

==============

srand(time(0));
alustaa satunnaislukugeneraattorin koneen kellonajalla

int luku { rand() % 100 };	// 

==============


set precision


std::string nimi;
std::cout << "Anna nimesi: ";
std::getline(std::cin, nimi);

if (nimi.empty()){
	std::cout << "Moro tuntematon\n";



LUKUARVON PÄIVITTÄMINEN ERI TYYPPIIN
===========
int luku = 10;
float liukuluku;

liukuluku = (float)luku;


ARRAY
============
Arrayn esittely	
	Arrayn esittely tapahtuu määrittelemällä arrayn tyyppi, arrayn koko ja arrayn nimeen viittaava muuttuja.
	int luvut[10];
Arrayn alustus		Arrayn voi aloittaa annetuilla arvoilla.
	int luvut[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
Arrayn elementtien luku	
	Arrayn elementtien lukeminen tapahtuu indeksoimalla arraya.
	std::cout << luvut[0] << std::endl; // Tulostaa 1
Arrayn elementtien muuttaminen
	Arrayn elementtien muuttaminen tapahtuu indeksoimalla arraya ja asettamalla uudelle arvolle.
	luvut[0] = 100;
Arrayn array	Arrayn sisällä voi olla toinen array.
	int luvut[10][10];





============================
		PERUSTEET	
============================
AND		OR	NOT
&&		||	!
============================

int main() { ... }	C++:n pääohjelma
	int main() { ... }
std::cout << ...;	Tulostaa tekstiä tai muuttujia näytölle
	std::cout << "Hei maailma!";
std::cin >> ...;	Lukee tekstiä tai muuttujia käyttäjältä
	std::cin >> nimi;
while	Toistaa koodia niin kauan kuin ehto on tosi
	while (i < 10) { std::cout << i; i++; }
for	Toistaa koodia tietyn määrän kertoja
	for (i = 0; i < 10; i++) { std::cout << i; }
if	Suorittaa koodia, jos ehto on tosi
	if (i == 5) { std::cout << "i on 5"; }

	
	
int		Kokonaisluku	int i = 10;
long	Pitkä kokonaisluku	long i = 1000000000;
float	Liukuluku	float f = 3.14;
double	Kaksoistunnistettu liukuluku	double d = 3.14159265358979323846;
char	Merkki	char c = 'a';
bool	Totuusarvo	bool b = true;	
	